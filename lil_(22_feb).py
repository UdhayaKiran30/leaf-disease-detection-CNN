# -*- coding: utf-8 -*-
"""LIL (22 FEB).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4yf95X7IZwp3z9VXNL4P7CfcTH_DYp0
"""

import os
import zipfile
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping
import numpy as np
import cv2

from google.colab import drive
drive.mount('/content/drive')

# Define dataset path in Google Drive
dataset_path = "/content/drive/MyDrive/LIL/mango.zip"
extract_path = "/content/mango"
# Unzipping dataset
zip_ref = zipfile.ZipFile(dataset_path, 'r')
zip_ref.extractall(extract_path)
zip_ref.close()

# Set dataset directories
#base_dir = "/content/dataset"
train_dir = os.path.join(extract_path, "train")
val_dir = os.path.join(extract_path, "val")
test_dir = os.path.join(extract_path, "test")

# Image preprocessing and augmentation
IMG_SIZE = (150, 150)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(rescale=1./255, rotation_range=30, width_shift_range=0.2,
                                   height_shift_range=0.2, shear_range=0.2, zoom_range=0.2,
                                   horizontal_flip=True, validation_split=0.2)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

model = keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    keras.layers.MaxPooling2D(2,2),

    keras.layers.Conv2D(64, (3,3), activation='relu'),
    keras.layers.MaxPooling2D(2,2),

    keras.layers.Conv2D(128, (3,3), activation='relu'),
    keras.layers.MaxPooling2D(2,2),

    keras.layers.Flatten(),
    keras.layers.Dense(512, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(4, activation='softmax')  # 4 classes
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

EPOCHS = 50
history = model.fit(train_generator, validation_data=val_generator, epochs=EPOCHS)

# Save the model
model.save("/content/leaf_disease_model.h5")

# Testing the model
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc:.2f}")
print(f"Test Loss: {test_loss:.2f}")

print(train_generator.class_indices)

cnn_model_path = "/content/leaf_disease_model.h5"
cnn_model = tf.keras.models.load_model(cnn_model_path)
print("CNN model loaded successfully!")

import tensorflow as tf
import numpy as np
import cv2
from google.colab import files
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
# Define class labels
class_labels = ["Anthracnose", "Bacterial Canker","Cutting Weevil", "Healthy"]

def predict_leaf_disease():
    while True:
        # Ask the user if they want to continue
        user_input = input("Do you want to upload an image for prediction? (yes/no): ").strip().lower()
        if user_input == "no":
            print("Exiting prediction loop.")
            break

        # Upload image
        print("Please upload an image:")
        uploaded = files.upload()

        for filename in uploaded.keys():
            # Load and preprocess the image
            img_path = filename
            img = image.load_img(img_path, target_size=(150, 150))  # Resize to model input size
            img_array = image.img_to_array(img)
            img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
            img_array = img_array / 255.0  # Normalize

            # Make prediction
            prediction = model.predict(img_array)
            predicted_class = np.argmax(prediction, axis=1)[0]
            predicted_label = class_labels[predicted_class]

            # Show image with prediction
            plt.imshow(img)
            plt.axis("off")
            plt.title(f"Predicted: {predicted_label}")
            plt.show()

            print(f"Prediction: {predicted_label}\n")

# Call function to upload and predict in a loop
predict_leaf_disease()